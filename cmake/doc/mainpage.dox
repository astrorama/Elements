/** \mainpage The basic instruction for building and running the Elements framework

\tableofcontents

\section howtobuild How to build and use the Elements framework with CMake

\subsection requirements Requirements

The CMake configuration of Elements is based on the version 2.8.5 or later
of [CMake](https://cmake.org).

\subsection quickstart Quick Start

To quickly get started, you can use the top Makefile,
which will take care of the main details (except the value of
``BINARY_TAG``). It is located at the root of your project:

```
$ make configure
$ make -j 8
$ make test
$ make install
```

Please note that the ```make install``` instruction is not installing the
built objects in the system. It creates a special ```InstallArea``` directory
that exposes these ojects to the client projects

The main targets are:


Target            | Action
------------------|--------
``configure``     |  just run C Make to generate the build directory (or reconfigure)
``all``           |  build everything (implies `configure`). This is the default target
``test``          |  run the tests, note that it does not imply the build and does not require installation
``tests``         |  same as above but implies `all`
``install``       |  populate the `InstallArea` directory, \`required for runtime\`
``clean``         |  clean-up of the built objects
``purge``         |  total removal of the built directory
``doc``           |  generation of the documentation.

\subsection build Build

The regular build is done as described above. This is the prefered way of building for development
purposes. The call to CMake will be done by

```
$ make configure
```
This will create a ```build.${BINARY_TAG}``` directory and run ```cmake ../``` in there. All
the other calls to make targets (except for ```purge``` and ```tests```) will be forwarded
to the generated Makefile of that directory.


I suggest to use the off-source build, which means that the files
required by the build and the build products are created in a different
directory than the source one. In this example I'll use ``Elements.build``,
created at the same level as the directory containing the sources
(``Elements.src``).

To prepare the build directory, you have to:


    $ src=$PWD/Elements.src
    $ mkdir Elements.build
    $ cd Elements.build
    $ cmake -DCMAKE_TOOLCHAIN_FILE=$src/toolchain.cmake \
        -G "Eclipse CDT4 - Unix Makefiles" $src

This will create the required Unix makefiles and the Eclipse project
configuration to build Elements.

Other options are available on the command line when you prepare the
build directory the first time or afterwards via the CMake configuration
tool ``ccmake``, for example ``CMAKE_USE_DISTCC`` or
``CMAKE_USE_CCACHE``.

Now you can build the project with a simple (from ``Elements.build``):


    $ make

or from Eclipse after you imported the project.

The tests can be run via the command ``ctest`` or with ``make test``.

\subsection install Install

The build of the project obtained with CMake cannot be used directly by
other projects: it needs to be installed in the source directory (for
backward compatibility with CMT) with the command:


    $ make install

It must be noted that the special file ``python.zip`` is not
automatically generated, so, if you want it, you have to call, after the
installation:


    $ make python.zip

\subsection run Run


The runtime environment for the installed binaries is described by the
XML file ``ElementsEnvironment.xml`` located in the directory
``InstallArea/$BINARY_TAG``, in the format understood by the Python
script ``env.py`` available in the ``cmake`` directory in the source
tree (it is also installed).

The behavior of ``env.py`` is quite similar to that of the standard Unix
commmand ``env`` (see ``man env``), with the addition of few functions
(append, prepend, XML).

For example, you can call ``elementsrun.py`` like this (with the variable
``src`` defined above):


    $ $src/cmake/env.py  --xml $src/InstallArea/$BINARY_TAG/ElementsEnvironment.xml \
        elementsrun.py --help

or, to have a sub-shell with the right environment:


    $ $src/cmake/env.py --xml $src/InstallArea/$BINARY_TAG/ElementsEnvironment.xml bash

\subsection runfromthebuilddir Run from the build directory

For testing and debugging (as already mentioned) there is no need to
install.

To run an application using the build directory, you can use the script
``env.py`` with the XML file ``GaudBuildEnvironment.xml`` located in the
build directory, or the convenience script ``run`` (always in the build
directory), for example like this:


    $ cd Elements.build
    $ ./run elementsrun.py --help
    $ ./run bash

\subsection resources Resources

  - `CMake
       documentation <http://www.cmake.org/cmake/help/documentation.html>`_

*/