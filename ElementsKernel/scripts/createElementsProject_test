#!/bin/sh

home_dir=${PWD}

project_name="ProjectTest"
dep_project="DependentProject"
version="1.0"

# Create unique directory
tmploc=$(mktemp -dq -t temp.XXXXXX)

# Clean and exit
local_clean_exit() {
  cd ${home_dir}
  rm -rf ${tmploc}
  exit $1
}

# Set to the User_area
export User_area=${tmploc}

cd ${tmploc}

CreateElementsProject $project_name $version -d $dep_project $version<<EOF
y
EOF

# Error? stop and clean up
if [ $? -ne 0 ]; then
   echo "Error: <CreateElementsProject $project_name $version> command failed!" 1>&2
   local_clean_exit 1
fi

# Make sure the project has been created
if [ ! -d $project_name ]; then
   echo "Error: <$project_name> directory not found!" 1>&2
   local_clean_exit 1
fi

# Make sure mandatory files has been created
if [ ! -e $User_area/$project_name/$version/CMakeLists.txt ] ||
   [ ! -e $User_area/$project_name/$version/Makefile ]; then
   echo "Error: <$User_area/$project_name/$version/CMakeLists.txt (and/or Makefile)> file not found" 1>&2
   local_clean_exit 1
fi

# Make sure <Project_test> is there
result=$( grep "$project_name $version" $User_area/$project_name/$version/CMakeLists.txt )
if [ $? -ne 0 ]; then
   echo "Error: <$project_name $version> not found in <$User_area/$project_name/$version/CMakeLists.txt> file!" 1>&2
   local_clean_exit 1
fi

#  Make sure elements_project macro contains the dependent project
result=$( grep "$dep_project $version" $User_area/$project_name/$version/CMakeLists.txt )
if [ $? -ne 0 ]; then
   echo "Error: <$dep_project $version> not found in <$User_area/$project_name/$version/CMakeLists.txt> file!" 1>&2
   local_clean_exit 1
fi

local_clean_exit 0
