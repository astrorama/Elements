/**
 * @file ElementsKernel/_impl/Configuration.icpp
 * @brief implementation of the templates declared in ElementsKernel/Configuration.h
 *
 * @date Feb 8, 2017
 * @author Hubert Degaudenzi
 *
 *
 * @copyright 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifndef ELEMENTSKERNEL_ELEMENTSKERNEL__IMPL_CONFIGURATION_ICPP_
#define ELEMENTSKERNEL_ELEMENTSKERNEL__IMPL_CONFIGURATION_ICPP_

#include <boost/filesystem.hpp>         // for boost::filesystem

#include "ElementsKernel/System.h"      // for DEFAULT_INSTALL_PREFIX
#include "ElementsKernel/Exception.h"   // for Exception
#include "ElementsKernel/Path.h"        // for Path::VARIABLE, Path::Type
                                         // for Path::getPathFromEnvVariable
namespace Elements {

template <typename T>
boost::filesystem::path getConfigurationPath(const T& file_name) {

  auto location_list = Path::getLocationsFromEnv(Path::VARIABLE.at(Path::Type::configuration));

  // the search is extended to the default system /usr/share/conf
  location_list.push_back(boost::filesystem::path(System::DEFAULT_INSTALL_PREFIX) / "share" / "conf");

  auto result = Path::getPathFromLocations(file_name, location_list);

  if(result.empty()) {
    throw Exception() << "The configuration file \"" << file_name << "\" cannot be found!";
  }

  return result;
}

} // Elements namespace

#endif // ELEMENTSKERNEL_ELEMENTSKERNEL__IMPL_CONFIGURATION_ICPP_
