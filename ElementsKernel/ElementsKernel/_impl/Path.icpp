/**
 * @file ElementsKernel/_impl/Path.icpp
 * @brief implementation of the templates declared in ElementsKernel/Path.h
 * @date May 17, 2016
 * @author Hubert Degaudenzi
 *
 * @copyright 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifndef ELEMENTSKERNEL__IMPL_PATH_ICPP_
#define ELEMENTSKERNEL__IMPL_PATH_ICPP_

#include <string>                           // for string
#include <vector>                           // for vector
#include <unordered_set>                    // for unordered_set
#include <algorithm>                        // for find_if, transform, for_each

#include <boost/filesystem.hpp>             // for boost::filesystem
#include <boost/algorithm/string/join.hpp>  // for join


namespace Elements {
namespace Path {

template <typename T, typename U>
boost::filesystem::path getPathFromLocations(const T& file_name, const std::vector<U>& locations) {

  using boost::filesystem::path;

  path found_path {};
  path file_path {file_name};

  auto found_pos = std::find_if(locations.cbegin(), locations.cend(),
      [file_path](const U& l) {
    return boost::filesystem::exists(path {l} / file_path);
  });

  if (found_pos != locations.cend()) {
    found_path = path {*found_pos} / file_path;
  }

  return found_path;

}

template <typename T, typename U>
std::vector<boost::filesystem::path> getAllPathFromLocations(const T& file_name, const std::vector<U>& locations) {

  using boost::filesystem::path;

  std::vector<path> file_list(locations.size());
  path file_path {file_name};

  std::transform(locations.cbegin(), locations.cend(),
                 file_list.begin(),
                 [file_path](const U& l){
    return path {l} / file_path;
  });

  auto found_pos = std::remove_if(file_list.begin(), file_list.end(),
      [](const path& p){
          return not boost::filesystem::exists(p);
  });

  file_list.erase(found_pos, file_list.end());

  return removeDuplicates(file_list);

}

template <typename T>
boost::filesystem::path getPathFromEnvVariable(const T& file_name, const std::string& path_variable) {

  using std::vector;
  using boost::filesystem::path;

  vector<path> location_list = getLocationsFromEnv(path_variable);

  return getPathFromLocations(file_name, location_list);

}

template <typename T>
std::string joinPath(const std::vector<T>& path_list) {

  using std::vector;
  using std::string;

  vector<string> elems(path_list.size());

  std::transform(path_list.cbegin(), path_list.cend(),
                 elems.begin(),
                 [](const T& s){
                   return boost::filesystem::path{s}.string();
                 });

  std::string result = boost::algorithm::join(elems, PATH_SEP);

  return result;
}

template <typename... Args>
auto join(Args&&... args) -> decltype(joinPath(std::forward<Args>(args)...)) {
  return joinPath(std::forward<Args>(args)...);
}

template <typename... Args>
auto split(Args&&... args) -> decltype(splitPath(std::forward<Args>(args)...)) {
  return splitPath(std::forward<Args>(args)...);
}


template <typename T, typename U>
std::vector<boost::filesystem::path> multiPathAppend(const std::vector<T>& initial_locations, const std::vector<U>& suffixes) {

  using std::vector;
  using boost::filesystem::path;

  vector<path> result(initial_locations.size()*suffixes.size());

  auto pos = result.begin();

  std::for_each(initial_locations.cbegin(), initial_locations.cend(),
                 [&pos, &suffixes](const T& l) {
                   std::transform(suffixes.cbegin(), suffixes.cend(),
                                  pos,
                                  [l](const U& s){
                                  return path {l} / s;
                                  });
                   pos += static_cast<std::ptrdiff_t>(suffixes.size());

                 });


  return result;
}

template <typename T>
std::vector<boost::filesystem::path> removeDuplicates(const std::vector<T>& path_list) {

  using boost::filesystem::path;

  std::unordered_set<std::string> s;

  std::vector<path> output(path_list.size());

  auto end = copy_if(path_list.cbegin(), path_list.cend(), output.begin(),
        [&s](const T& i) {
          return s.insert(path{i}.string()).second;
        });

  output.erase(end, output.end());

  return output;

}


}  // namespace Path
}  // namespace Elements

#endif  // ELEMENTSKERNEL__IMPL_PATH_ICPP_
